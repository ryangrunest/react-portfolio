{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Products from \"../components/Products\";\nimport Cart from \"../components/Cart\";\nimport { gql } from \"babel-plugin-graphql-js-client-transform\";\nimport Layout from \"../components/MyLayout\";\nimport { useRouter } from \"next/router\";\nimport Client from \"graphql-js-client\";\nimport typeBundle from \"../types\";\nconst client = new Client(typeBundle, {\n  url: \"https://graphql.myshopify.com/api/graphql\",\n  fetcherOptions: {\n    headers: {\n      \"X-Shopify-Storefront-Access-Token\": \"dd4d4dc146542ba7763305d71d1b3d38\"\n    }\n  }\n}); // class Blog extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       isCartOpen: false,\n//       checkout: { lineItems: [] },\n//       products: [],\n//       shop: {}\n//     };\n//     this.handleCartClose = this.handleCartClose.bind(this);\n//     this.addVariantToCart = this.addVariantToCart.bind(this);\n//     this.updateQuantityInCart = this.updateQuantityInCart.bind(this);\n//     this.removeLineItemInCart = this.removeLineItemInCart.bind(this);\n//   }\n//   componentWillMount() {\n//     const client = this.props.client;\n//     client\n//       .send(\n//         gql(client)`\n//       mutation {\n//         checkoutCreate(input: {}) {\n//           userErrors {\n//             message\n//             field\n//           }\n//           checkout {\n//             id\n//             webUrl\n//             subtotalPrice\n//             totalTax\n//             totalPrice\n//             lineItems (first:250) {\n//               pageInfo {\n//                 hasNextPage\n//                 hasPreviousPage\n//               }\n//               edges {\n//                 node {\n//                   title\n//                   variant {\n//                     title\n//                     image {\n//                       src\n//                     }\n//                     price\n//                   }\n//                   quantity\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `\n//       )\n//       .then(res => {\n//         this.setState({\n//           checkout: res.model.checkoutCreate.checkout\n//         });\n//       });\n//     client\n//       .send(\n//         gql(client)`\n//       query {\n//         shop {\n//           name\n//           description\n//           products(first:20) {\n//             pageInfo {\n//               hasNextPage\n//               hasPreviousPage\n//             }\n//             edges {\n//               node {\n//                 id\n//                 title\n//                 options {\n//                   name\n//                   values\n//                 }\n//                 variants(first: 250) {\n//                   pageInfo {\n//                     hasNextPage\n//                     hasPreviousPage\n//                   }\n//                   edges {\n//                     node {\n//                       title\n//                       selectedOptions {\n//                         name\n//                         value\n//                       }\n//                       image {\n//                         src\n//                       }\n//                       price\n//                     }\n//                   }\n//                 }\n//                 images(first: 250) {\n//                   pageInfo {\n//                     hasNextPage\n//                     hasPreviousPage\n//                   }\n//                   edges {\n//                     node {\n//                       src\n//                     }\n//                   }\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `\n//       )\n//       .then(res => {\n//         this.setState({\n//           shop: res.model.shop,\n//           products: res.model.shop.products\n//         });\n//       });\n//   }\n//   addVariantToCart(variantId, quantity) {\n//     this.setState({\n//       isCartOpen: true\n//     });\n//     const lineItems = [{ variantId, quantity: parseInt(quantity, 10) }];\n//     const checkoutId = this.state.checkout.id;\n//     return this.props.client\n//       .send(\n//         gql(this.props.client)`\n//       mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]!) {\n//         checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n//           userErrors {\n//             message\n//             field\n//           }\n//           checkout {\n//             webUrl\n//             subtotalPrice\n//             totalTax\n//             totalPrice\n//             lineItems (first:250) {\n//               pageInfo {\n//                 hasNextPage\n//                 hasPreviousPage\n//               }\n//               edges {\n//                 node {\n//                   title\n//                   variant {\n//                     title\n//                     image {\n//                       src\n//                     }\n//                     price\n//                   }\n//                   quantity\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `,\n//         { checkoutId, lineItems }\n//       )\n//       .then(res => {\n//         this.setState({\n//           checkout: res.model.checkoutLineItemsAdd.checkout\n//         });\n//       });\n//   }\n//   updateQuantityInCart(lineItemId, quantity) {\n//     const checkoutId = this.state.checkout.id;\n//     const lineItems = [{ id: lineItemId, quantity: parseInt(quantity, 10) }];\n//     return this.props.client\n//       .send(\n//         gql(this.props.client)`\n//       mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n//         checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n//           userErrors {\n//             message\n//             field\n//           }\n//           checkout {\n//             webUrl\n//             subtotalPrice\n//             totalTax\n//             totalPrice\n//             lineItems (first:250) {\n//               pageInfo {\n//                 hasNextPage\n//                 hasPreviousPage\n//               }\n//               edges {\n//                 node {\n//                   title\n//                   variant {\n//                     title\n//                     image {\n//                       src\n//                     }\n//                     price\n//                   }\n//                   quantity\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `,\n//         { checkoutId, lineItems }\n//       )\n//       .then(res => {\n//         this.setState({\n//           checkout: res.model.checkoutLineItemsUpdate.checkout\n//         });\n//       });\n//   }\n//   removeLineItemInCart(lineItemId) {\n//     const checkoutId = this.state.checkout.id;\n//     return this.props.client\n//       .send(\n//         gql(this.props.client)`\n//       mutation ($checkoutId: ID!, $lineItemIds: [ID!]!) {\n//         checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n//           userErrors {\n//             message\n//             field\n//           }\n//           checkout {\n//             webUrl\n//             subtotalPrice\n//             totalTax\n//             totalPrice\n//             lineItems (first:250) {\n//               pageInfo {\n//                 hasNextPage\n//                 hasPreviousPage\n//               }\n//               edges {\n//                 node {\n//                   title\n//                   variant {\n//                     title\n//                     image {\n//                       src\n//                     }\n//                     price\n//                   }\n//                   quantity\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     `,\n//         { checkoutId, lineItemIds: [lineItemId] }\n//       )\n//       .then(res => {\n//         this.setState({\n//           checkout: res.model.checkoutLineItemsRemove.checkout\n//         });\n//       });\n//   }\n//   handleCartClose() {\n//     this.setState({\n//       isCartOpen: false\n//     });\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App__header\">\n//           {!this.state.isCartOpen && (\n//             <div className=\"App__view-cart-wrapper\">\n//               <button\n//                 className=\"App__view-cart\"\n//                 onClick={() => this.setState({ isCartOpen: true })}\n//               >\n//                 Cart\n//               </button>\n//             </div>\n//           )}\n//           <div className=\"App__title\">\n//             <h1>{this.state.shop.name}: React Example</h1>\n//             <h2>{this.state.shop.description}</h2>\n//           </div>\n//         </header>\n//         <Products\n//           products={this.state.products}\n//           addVariantToCart={this.addVariantToCart}\n//         />\n//         <Cart\n//           checkout={this.state.checkout}\n//           isCartOpen={this.state.isCartOpen}\n//           handleCartClose={this.handleCartClose}\n//           updateQuantityInCart={this.updateQuantityInCart}\n//           removeLineItemInCart={this.removeLineItemInCart}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// export default Blog;\n\nexport default function Blog() {\n  console.log(client);\n  return __jsx(Layout, {\n    page: \"Blog\"\n  }, __jsx(\"p\", null, \"This is the blog page.\"));\n}","map":null,"metadata":{},"sourceType":"module"}