{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport fetch from \"isomorphic-unfetch\";\nvar url = \"https://another-test-store-97213.myshopify.com/api/graphql\";\nvar headers = {\n  \"Content-Type\": \"application/graphql\",\n  \"X-Shopify-Storefront-Access-Token\": \"5db76a7bcd70717eade01e6a64392829\"\n};\nvar queries = {\n  getProductsWithImages: function getProductsWithImages(numberOfProducts) {\n    return new _Promise(function (resolve, reject) {\n      var query = \"query\\t{\\n      products(first:\".concat(numberOfProducts, \")\\t{\\n        edges {\\n          node {\\n            id\\n            title\\n            images(first: 1) {\\n              edges {\\n                node {\\n                  id\\n                }\\n              }\\n            }\\n            variants(first:10) {\\n              edges {\\n                node {\\n                  image {\\n                    transformedSrc\\n                  }\\n                }\\n              }\\n            }\\n            priceRange {\\n              maxVariantPrice {\\n                amount\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\");\n      fetch(url, {\n        method: \"post\",\n        headers: headers,\n        body: query\n      }).then(function (r) {\n        return r.json();\n      }).then(function (data) {\n        resolve(data.data.products.edges);\n      });\n    });\n  },\n  getShopName: new _Promise(function (resolve, reject) {\n    var value = \"cheeseburger\";\n    var query = \"query\\t{\\n      shop {\\n        name\\n      }\\n    }\\n    \";\n    fetch(url, {\n      method: \"post\",\n      headers: headers,\n      body: query\n    }).then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      value = data.data.shop.name;\n      resolve(value);\n    });\n  }),\n  createCheckout: function createCheckout(lineItem) {\n    return new _Promise(function (resolve, reject) {\n      var value = \"cheeseburger\";\n      var query = \"mutation {\\n        checkoutCreate(input: {\\n          lineItems: [{ variantId: \\\"\".concat(lineItem.id, \"\\\", quantity: \").concat(lineItem.quantity, \" }]\\n        }) {\\n          checkout {\\n             id\\n             webUrl\\n             lineItems(first: 5) {\\n               edges {\\n                 node {\\n                   title\\n                   quantity\\n                 }\\n               }\\n             }\\n          }\\n        }\\n      }\");\n      fetch(url, {\n        method: \"post\",\n        headers: headers,\n        body: query\n      }).then(function (r) {\n        return r.json();\n      }).then(function (data) {\n        console.log(data);\n      });\n    });\n  }\n};\nexport default queries;","map":{"version":3,"sources":["/Users/rgrunest/Developer/react-portfolio/queries/shop.js"],"names":["fetch","url","headers","queries","getProductsWithImages","numberOfProducts","resolve","reject","query","method","body","then","r","json","data","products","edges","getShopName","value","shop","name","createCheckout","lineItem","id","quantity","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,IAAMC,GAAG,GAAG,4DAAZ;AACA,IAAMC,OAAO,GAAG;AACd,kBAAgB,qBADF;AAEd,uCAAqC;AAFvB,CAAhB;AAKA,IAAIC,OAAO,GAAG;AACZC,EAAAA,qBAAqB,EAAE,+BAAAC,gBAAgB,EAAI;AACzC,WAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,KAAK,4CACQH,gBADR,0lBAAT;AA+BAL,MAAAA,KAAK,CAACC,GAAD,EAAM;AACTQ,QAAAA,MAAM,EAAE,MADC;AAETP,QAAAA,OAAO,EAAEA,OAFA;AAGTQ,QAAAA,IAAI,EAAEF;AAHG,OAAN,CAAL,CAKGG,IALH,CAKQ,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OALT,EAMGF,IANH,CAMQ,UAAAG,IAAI,EAAI;AACZR,QAAAA,OAAO,CAACQ,IAAI,CAACA,IAAL,CAAUC,QAAV,CAAmBC,KAApB,CAAP;AACD,OARH;AASD,KAzCM,CAAP;AA0CD,GA5CW;AA6CZC,EAAAA,WAAW,EAAE,aAAY,UAACX,OAAD,EAAUC,MAAV,EAAqB;AAC5C,QAAIW,KAAK,GAAG,cAAZ;AACA,QAAIV,KAAK,+DAAT;AAMAR,IAAAA,KAAK,CAACC,GAAD,EAAM;AACTQ,MAAAA,MAAM,EAAE,MADC;AAETP,MAAAA,OAAO,EAAEA,OAFA;AAGTQ,MAAAA,IAAI,EAAEF;AAHG,KAAN,CAAL,CAKGG,IALH,CAKQ,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,KALT,EAMGF,IANH,CAMQ,UAAAG,IAAI,EAAI;AACZI,MAAAA,KAAK,GAAGJ,IAAI,CAACA,IAAL,CAAUK,IAAV,CAAeC,IAAvB;AACAd,MAAAA,OAAO,CAACY,KAAD,CAAP;AACD,KATH;AAUD,GAlBY,CA7CD;AAgEZG,EAAAA,cAAc,EAAE,wBAAAC,QAAQ,EAAI;AAC1B,WAAO,aAAY,UAAChB,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIW,KAAK,GAAG,cAAZ;AACA,UAAIV,KAAK,+FAEuBc,QAAQ,CAACC,EAFhC,2BAEkDD,QAAQ,CAACE,QAF3D,qTAAT;AAkBAxB,MAAAA,KAAK,CAACC,GAAD,EAAM;AACTQ,QAAAA,MAAM,EAAE,MADC;AAETP,QAAAA,OAAO,EAAEA,OAFA;AAGTQ,QAAAA,IAAI,EAAEF;AAHG,OAAN,CAAL,CAKGG,IALH,CAKQ,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OALT,EAMGF,IANH,CAMQ,UAAAG,IAAI,EAAI;AACZW,QAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACD,OARH;AASD,KA7BM,CAAP;AA8BD;AA/FW,CAAd;AAkGA,eAAeX,OAAf","sourcesContent":["import fetch from \"isomorphic-unfetch\";\n\nconst url = \"https://another-test-store-97213.myshopify.com/api/graphql\";\nconst headers = {\n  \"Content-Type\": \"application/graphql\",\n  \"X-Shopify-Storefront-Access-Token\": \"5db76a7bcd70717eade01e6a64392829\"\n};\n\nlet queries = {\n  getProductsWithImages: numberOfProducts => {\n    return new Promise((resolve, reject) => {\n      let query = `query\t{\n      products(first:${numberOfProducts})\t{\n        edges {\n          node {\n            id\n            title\n            images(first: 1) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n            variants(first:10) {\n              edges {\n                node {\n                  image {\n                    transformedSrc\n                  }\n                }\n              }\n            }\n            priceRange {\n              maxVariantPrice {\n                amount\n              }\n            }\n          }\n        }\n      }\n    }`;\n      fetch(url, {\n        method: \"post\",\n        headers: headers,\n        body: query\n      })\n        .then(r => r.json())\n        .then(data => {\n          resolve(data.data.products.edges);\n        });\n    });\n  },\n  getShopName: new Promise((resolve, reject) => {\n    let value = \"cheeseburger\";\n    let query = `query\t{\n      shop {\n        name\n      }\n    }\n    `;\n    fetch(url, {\n      method: \"post\",\n      headers: headers,\n      body: query\n    })\n      .then(r => r.json())\n      .then(data => {\n        value = data.data.shop.name;\n        resolve(value);\n      });\n  }),\n  createCheckout: lineItem => {\n    return new Promise((resolve, reject) => {\n      let value = \"cheeseburger\";\n      let query = `mutation {\n        checkoutCreate(input: {\n          lineItems: [{ variantId: \"${lineItem.id}\", quantity: ${lineItem.quantity} }]\n        }) {\n          checkout {\n             id\n             webUrl\n             lineItems(first: 5) {\n               edges {\n                 node {\n                   title\n                   quantity\n                 }\n               }\n             }\n          }\n        }\n      }`;\n      fetch(url, {\n        method: \"post\",\n        headers: headers,\n        body: query\n      })\n        .then(r => r.json())\n        .then(data => {\n          console.log(data);\n        });\n    });\n  }\n};\n\nexport default queries;\n"]},"metadata":{},"sourceType":"module"}