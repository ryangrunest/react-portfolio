{"ast":null,"code":"var _jsxFileName = \"/Users/rgrunest/Developer/react-portfolio/pages/blog.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Products from \"../components/Products\";\nimport Cart from \"../components/Cart\";\nimport { gql } from \"babel-plugin-graphql-js-client-transform\";\nimport Layout from \"../components/MyLayout\";\nimport { useRouter } from \"next/router\";\nimport Client from \"graphql-js-client\";\nimport typeBundle from \"./types\";\nconst client = new Client(typeBundle, {\n  url: \"https://graphql.myshopify.com/api/graphql\",\n  fetcherOptions: {\n    headers: {\n      \"X-Shopify-Storefront-Access-Token\": \"dd4d4dc146542ba7763305d71d1b3d38\"\n    }\n  }\n});\n\nclass Blog extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isCartOpen: false,\n      checkout: {\n        lineItems: []\n      },\n      products: [],\n      shop: {}\n    };\n    this.handleCartClose = this.handleCartClose.bind(this);\n    this.addVariantToCart = this.addVariantToCart.bind(this);\n    this.updateQuantityInCart = this.updateQuantityInCart.bind(this);\n    this.removeLineItemInCart = this.removeLineItemInCart.bind(this);\n  }\n\n  componentWillMount() {\n    const client = this.props.client;\n    client.send(gql(client)`\n      mutation {\n        checkoutCreate(input: {}) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            id\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `).then(res => {\n      this.setState({\n        checkout: res.model.checkoutCreate.checkout\n      });\n    });\n    client.send(gql(client)`\n      query {\n        shop {\n          name\n          description\n          products(first:20) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                options {\n                  name\n                  values\n                }\n                variants(first: 250) {\n                  pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                  }\n                  edges {\n                    node {\n                      title\n                      selectedOptions {\n                        name\n                        value\n                      }\n                      image {\n                        src\n                      }\n                      price\n                    }\n                  }\n                }\n                images(first: 250) {\n                  pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                  }\n                  edges {\n                    node {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `).then(res => {\n      this.setState({\n        shop: res.model.shop,\n        products: res.model.shop.products\n      });\n    });\n  }\n\n  addVariantToCart(variantId, quantity) {\n    this.setState({\n      isCartOpen: true\n    });\n    const lineItems = [{\n      variantId,\n      quantity: parseInt(quantity, 10)\n    }];\n    const checkoutId = this.state.checkout.id;\n    return this.props.client.send(gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]!) {\n        checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      checkoutId,\n      lineItems\n    }).then(res => {\n      this.setState({\n        checkout: res.model.checkoutLineItemsAdd.checkout\n      });\n    });\n  }\n\n  updateQuantityInCart(lineItemId, quantity) {\n    const checkoutId = this.state.checkout.id;\n    const lineItems = [{\n      id: lineItemId,\n      quantity: parseInt(quantity, 10)\n    }];\n    return this.props.client.send(gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n        checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      checkoutId,\n      lineItems\n    }).then(res => {\n      this.setState({\n        checkout: res.model.checkoutLineItemsUpdate.checkout\n      });\n    });\n  }\n\n  removeLineItemInCart(lineItemId) {\n    const checkoutId = this.state.checkout.id;\n    return this.props.client.send(gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItemIds: [ID!]!) {\n        checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      checkoutId,\n      lineItemIds: [lineItemId]\n    }).then(res => {\n      this.setState({\n        checkout: res.model.checkoutLineItemsRemove.checkout\n      });\n    });\n  }\n\n  handleCartClose() {\n    this.setState({\n      isCartOpen: false\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, __jsx(\"header\", {\n      className: \"App__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, !this.state.isCartOpen && __jsx(\"div\", {\n      className: \"App__view-cart-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      className: \"App__view-cart\",\n      onClick: () => this.setState({\n        isCartOpen: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Cart\")), __jsx(\"div\", {\n      className: \"App__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, this.state.shop.name, \": React Example\"), __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, this.state.shop.description))), __jsx(Products, {\n      products: this.state.products,\n      addVariantToCart: this.addVariantToCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), __jsx(Cart, {\n      checkout: this.state.checkout,\n      isCartOpen: this.state.isCartOpen,\n      handleCartClose: this.handleCartClose,\n      updateQuantityInCart: this.updateQuantityInCart,\n      removeLineItemInCart: this.removeLineItemInCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Blog; // export default function Blog() {\n//   console.log(client);\n//   return (\n//     <Layout page=\"Blog\">\n//       <p>This is the blog page.</p>\n//     </Layout>\n//   );\n// }","map":{"version":3,"sources":["/Users/rgrunest/Developer/react-portfolio/pages/blog.js"],"names":["React","Component","Products","Cart","gql","Layout","useRouter","Client","typeBundle","client","url","fetcherOptions","headers","Blog","constructor","state","isCartOpen","checkout","lineItems","products","shop","handleCartClose","bind","addVariantToCart","updateQuantityInCart","removeLineItemInCart","componentWillMount","props","send","then","res","setState","model","checkoutCreate","variantId","quantity","parseInt","checkoutId","id","checkoutLineItemsAdd","lineItemId","checkoutLineItemsUpdate","lineItemIds","checkoutLineItemsRemove","render","name","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Products from \"../components/Products\";\nimport Cart from \"../components/Cart\";\nimport { gql } from \"babel-plugin-graphql-js-client-transform\";\nimport Layout from \"../components/MyLayout\";\nimport { useRouter } from \"next/router\";\nimport Client from \"graphql-js-client\";\nimport typeBundle from \"./types\";\n\nconst client = new Client(typeBundle, {\n  url: \"https://graphql.myshopify.com/api/graphql\",\n  fetcherOptions: {\n    headers: {\n      \"X-Shopify-Storefront-Access-Token\": \"dd4d4dc146542ba7763305d71d1b3d38\"\n    }\n  }\n});\n\nclass Blog extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isCartOpen: false,\n      checkout: { lineItems: [] },\n      products: [],\n      shop: {}\n    };\n\n    this.handleCartClose = this.handleCartClose.bind(this);\n    this.addVariantToCart = this.addVariantToCart.bind(this);\n    this.updateQuantityInCart = this.updateQuantityInCart.bind(this);\n    this.removeLineItemInCart = this.removeLineItemInCart.bind(this);\n  }\n\n  componentWillMount() {\n    const client = this.props.client;\n\n    client\n      .send(\n        gql(client)`\n      mutation {\n        checkoutCreate(input: {}) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            id\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n      )\n      .then(res => {\n        this.setState({\n          checkout: res.model.checkoutCreate.checkout\n        });\n      });\n\n    client\n      .send(\n        gql(client)`\n      query {\n        shop {\n          name\n          description\n          products(first:20) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                options {\n                  name\n                  values\n                }\n                variants(first: 250) {\n                  pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                  }\n                  edges {\n                    node {\n                      title\n                      selectedOptions {\n                        name\n                        value\n                      }\n                      image {\n                        src\n                      }\n                      price\n                    }\n                  }\n                }\n                images(first: 250) {\n                  pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                  }\n                  edges {\n                    node {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n      )\n      .then(res => {\n        this.setState({\n          shop: res.model.shop,\n          products: res.model.shop.products\n        });\n      });\n  }\n\n  addVariantToCart(variantId, quantity) {\n    this.setState({\n      isCartOpen: true\n    });\n\n    const lineItems = [{ variantId, quantity: parseInt(quantity, 10) }];\n    const checkoutId = this.state.checkout.id;\n\n    return this.props.client\n      .send(\n        gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]!) {\n        checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n        { checkoutId, lineItems }\n      )\n      .then(res => {\n        this.setState({\n          checkout: res.model.checkoutLineItemsAdd.checkout\n        });\n      });\n  }\n\n  updateQuantityInCart(lineItemId, quantity) {\n    const checkoutId = this.state.checkout.id;\n    const lineItems = [{ id: lineItemId, quantity: parseInt(quantity, 10) }];\n\n    return this.props.client\n      .send(\n        gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n        checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n        { checkoutId, lineItems }\n      )\n      .then(res => {\n        this.setState({\n          checkout: res.model.checkoutLineItemsUpdate.checkout\n        });\n      });\n  }\n\n  removeLineItemInCart(lineItemId) {\n    const checkoutId = this.state.checkout.id;\n\n    return this.props.client\n      .send(\n        gql(this.props.client)`\n      mutation ($checkoutId: ID!, $lineItemIds: [ID!]!) {\n        checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n          userErrors {\n            message\n            field\n          }\n          checkout {\n            webUrl\n            subtotalPrice\n            totalTax\n            totalPrice\n            lineItems (first:250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  variant {\n                    title\n                    image {\n                      src\n                    }\n                    price\n                  }\n                  quantity\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n        { checkoutId, lineItemIds: [lineItemId] }\n      )\n      .then(res => {\n        this.setState({\n          checkout: res.model.checkoutLineItemsRemove.checkout\n        });\n      });\n  }\n\n  handleCartClose() {\n    this.setState({\n      isCartOpen: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App__header\">\n          {!this.state.isCartOpen && (\n            <div className=\"App__view-cart-wrapper\">\n              <button\n                className=\"App__view-cart\"\n                onClick={() => this.setState({ isCartOpen: true })}\n              >\n                Cart\n              </button>\n            </div>\n          )}\n          <div className=\"App__title\">\n            <h1>{this.state.shop.name}: React Example</h1>\n            <h2>{this.state.shop.description}</h2>\n          </div>\n        </header>\n        <Products\n          products={this.state.products}\n          addVariantToCart={this.addVariantToCart}\n        />\n        <Cart\n          checkout={this.state.checkout}\n          isCartOpen={this.state.isCartOpen}\n          handleCartClose={this.handleCartClose}\n          updateQuantityInCart={this.updateQuantityInCart}\n          removeLineItemInCart={this.removeLineItemInCart}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n\n// export default function Blog() {\n//   console.log(client);\n//   return (\n//     <Layout page=\"Blog\">\n//       <p>This is the blog page.</p>\n//     </Layout>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}